matrix:
- name: markdown
  aspell:
    lang: en
    ignore-case: true
  dictionary:
    wordlists:
    - docs/dictionary/wordlist.txt
    encoding: utf-8
  pipeline:
  - pyspelling.filters.markdown:
  - pyspelling.filters.context:
      context_visible_first: true
      escapes: '\\[\\`~]'
      delimiters:
      # Ignore text between inline back ticks as this is code or hightlight words
      - open: '(?P<open>`+)'
        close: '(?P=open)'
      # Ignore surrounded in <> as in RST it is link
      - open: '<(https?://[^\\s/$.?#].[^\\s]+|[A-Za-z0-9-_:.]+)'
        close: '>'
  sources:
  - 'docs/*.rst'
  - '**/*.md'
  - '.github/**/*.md'
  default_encoding: utf-8

- name: json-schemas
  aspell:
    lang: en
    ignore-case: true
  dictionary:
    wordlists:
    - docs/dictionary/wordlist.txt
  pipeline:
  - pyspelling.filters.javascript:
      jsdocs: true
      line_comments: false
      block_comments: false
      strings: true
  - pyspelling.filters.context:
      context_visible_first: true
      escapes: '\\[\\`~]'
      delimiters:
      # Ignore Pāli word as it cannot be added to dictionary
      - open: '(Pāli)'
        close: '-'
  sources:
  - metadata_backend/helpers/schemas/*.json
  default_encoding: utf-8

- name: python
  sources:
  - '{metadata_submitter,scripts}/**/*.py'
  aspell:
    lang: en
  dictionary:
    wordlists:
    - docs/dictionary/wordlist.txt
  pipeline:
  - pyspelling.filters.python:
      group_comments: true
  - pyspelling.flow_control.wildcard:
      allow:
      - py-comment
  - pyspelling.filters.context:
      context_visible_first: true
      delimiters:
      # Ignore lint (noqa) and coverage (pragma) as well as shebang (#!) and bandit (nosec)
      - open: '^(?: *(?:noqa\b|pragma: no cover|nosec)|!)'
        close: '$'
      # Ignore Python encoding string -*- encoding stuff -*-
      - open: '^ *-\*-'
        close: '-\*-$'
      # Ignore docstring variable param
      - open: '^(?: *(:param \w+:))'
        close: '$'
  - pyspelling.filters.context:
      context_visible_first: true
      escapes: '\\[\\`]'
      delimiters:
      # Ignore multiline content between fences (fences can have 3 or more back ticks)
      # ```
      # content
      # ```
      - open: '(?s)^(?P<open> *`{3,})$'
        close: '^(?P=open)$'
      # Ignore text between inline back ticks
      - open: '(?P<open>`+)'
        close: '(?P=open)'
  - pyspelling.filters.url:

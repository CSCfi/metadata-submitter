openapi: 3.0.0
info:
  description: |-
    This is a definition of CSC Metadata Submitter API.

  version: 1.0.0
  title: CSC Metadata Submitter API
  license:
    name: License Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: Submission
    description: Endpoints used in submission
  - name: Query
    description: Endpoints used for data retrieval
  - name: Manage
    description: Endpoints used for managing data
paths:
  /submit:
    post:
      tags:
        - Submission
      summary: XML submission endpoint, will also trigger validation.
      parameters:
        - name: folder
          in: query
          schema:
            type: string
          description: The folder ID where object belongs to.
          required: true
          example: "folder=12345"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectsCreated"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
  /validate:
    post:
      tags:
        - Submission
      summary: Validate XML before submission.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectValidated"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
  /schemas:
    get:
      tags:
        - Query
      summary: List of available schemas
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemasList"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404NotFound"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
  /schemas/{schema}:
    get:
      tags:
        - Query
      summary: Retrieve JSON schema by its name.
      parameters:
        - name: schema
          in: path
          description: Name of the schema.
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
  /objects/{schema}:
    get:
      tags:
        - Query
      summary: Filter objects from a specific schema using various query string parameters. By default it will show 10 results per page.
      parameters:
        - name: schema
          in: path
          description: Title of the XML schema.
          schema:
            type: string
          required: true
        - in: query
          name: page
          schema:
            type: string
          description: Page number
        - in: query
          name: per_page
          schema:
            type: string
          description: Results per page
        - in: query
          name: title
          schema:
            type: string
          description: Some description for title
        - in: query
          name: studyType
          schema:
            type: string
          description: Some description for studyType
        - in: query
          name: studyAbstract
          schema:
            type: string
          description: Some description for studyAbstract
        - in: query
          name: projectID
          schema:
            type: string
          description: Some description for projectID
        - in: query
          name: relatedStudies
          schema:
            type: string
          description: Some description for relatedStudies
        - in: query
          name: studyAttributes
          schema:
            type: string
          description: Some description for studyAttributes
        - in: query
          name: sampleName
          schema:
            type: string
          description: Some description for sampleName
        - in: query
          name: scientificName
          schema:
            type: string
          description: Some description for scientificName
        - in: query
          name: commonName
          schema:
            type: string
          description: Some description for commonName
        - in: query
          name: fileType
          schema:
            type: string
          description: Some description for fileType
        - in: query
          name: studyReference
          schema:
            type: string
          description: Some description for studyReference
        - in: query
          name: sampleReference
          schema:
            type: string
          description: Some description for sampleReference
        - in: query
          name: experimentReference
          schema:
            type: string
          description: Some description for experimentReference
        - in: query
          name: runReference
          schema:
            type: string
          description: Some description for runReference
        - in: query
          name: analysisReference
          schema:
            type: string
          description: Some description for analysisReference
        - in: query
          name: analysisType
          schema:
            type: string
          description: Some description for analysisType
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectList"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404NotFound"
    post:
      tags:
        - Submission
      summary: Submit data to a specific schema
      parameters:
        - name: schema
          in: path
          description: Name of the Metadata schema.
          schema:
            type: string
          required: true
        - name: folder
          in: query
          schema:
            type: string
          description: The folder ID where object belongs to.
          required: true
          example: "folder=12345"
      requestBody:
        content:
          multipart/form-data::
            schema:
              type: object
              properties:
                schema:
                  type: string
                  format: binary
          application/json:
            schema:
              type: object
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ObjectCreated"
                  - $ref: "#/components/schemas/ObjectsCreated"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
  /objects/{schema}/{accessionId}:
    get:
      tags:
        - Query
      summary: List of object by accession ID.
      parameters:
        - name: schema
          in: path
          description: Unique id of the targeted service.
          schema:
            type: string
          required: true
        - name: accessionId
          in: path
          description: filter objects in schema using accession ID
          schema:
            type: string
          required: true
        - name: format
          in: query
          schema:
            type: string
          description: Set response content-type. Will be JSON by default, use XML if you want originally submitted XML file.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/xml:
              schema:
                type: string
                format: binary
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404NotFound"
    patch:
      tags:
        - Manage
      summary: Update information on an object, on success return the updated object
      requestBody:
        content:
          application/json:
            schema:
              type: object
      parameters:
        - name: schema
          in: path
          description: Unique id of the targeted service.
          schema:
            type: string
          required: true
        - name: accessionId
          in: path
          description: filter objects in schema using accession ID
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectCreated"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
    put:
      tags:
        - Manage
      summary: Update the whole object object, on success return the updated object
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
      parameters:
        - name: schema
          in: path
          description: Unique id of the targeted service.
          schema:
            type: string
          required: true
        - name: accessionId
          in: path
          description: filter objects in schema using accession ID
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectCreated"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
    delete:
      tags:
        - Manage
      summary: Delete object from a schema with a specified accession ID
      parameters:
        - name: schema
          in: path
          description: Unique id of the targeted service.
          schema:
            type: string
          required: true
        - name: accessionId
          in: path
          description: filter objects in schema using accession ID
          schema:
            type: string
          required: true
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
  /drafts/{schema}:
    post:
      tags:
        - Submission
      summary: Submit data draft to a specific schema
      parameters:
        - name: schema
          in: path
          description: Name of the Metadata schema.
          schema:
            type: string
          required: true
        - name: folder
          in: query
          schema:
            type: string
          description: The folder ID where object belongs to.
          required: true
          example: "folder=12345"
      requestBody:
        content:
          multipart/form-data::
            schema:
              type: object
              properties:
                schema:
                  type: string
                  format: binary
          application/json:
            schema:
              type: object
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectCreated"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
  /drafts/{schema}/{accessionId}:
    get:
      tags:
        - Query
      summary: List of object drafts by accession ID.
      parameters:
        - name: schema
          in: path
          description: Unique id of the targeted service.
          schema:
            type: string
          required: true
        - name: accessionId
          in: path
          description: filter objects in schema using accession ID
          schema:
            type: string
          required: true
        - name: format
          in: query
          schema:
            type: string
          description: Set response content-type. Will be JSON by default, use XML if you want originally submitted XML file.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/xml:
              schema:
                type: string
                format: binary
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404NotFound"
    patch:
      tags:
        - Manage
      summary: Update information on an object, on success return the updated object
      requestBody:
        content:
          application/json:
            schema:
              type: object
      parameters:
        - name: schema
          in: path
          description: Unique id of the targeted service.
          schema:
            type: string
          required: true
        - name: accessionId
          in: path
          description: filter objects in schema using accession ID
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectCreated"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
    put:
      tags:
        - Manage
      summary: Update the whole object object, on success return the updated object
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
      parameters:
        - name: schema
          in: path
          description: Unique id of the targeted service.
          schema:
            type: string
          required: true
        - name: accessionId
          in: path
          description: filter objects in schema using accession ID
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectCreated"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
    delete:
      tags:
        - Manage
      summary: Delete object from a schema with a specified accession ID
      parameters:
        - name: schema
          in: path
          description: Unique id of the targeted service.
          schema:
            type: string
          required: true
        - name: accessionId
          in: path
          description: filter objects in schema using accession ID
          schema:
            type: string
          required: true
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
  /templates/{schema}:
    post:
      tags:
        - Submission
      summary: Submit data to a specific schema
      parameters:
        - name: schema
          in: path
          description: Title of the template schema.
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectCreated"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
  /templates/{schema}/{accessionId}:
    get:
      tags:
        - Query
      summary: List of object by accession ID.
      parameters:
        - name: schema
          in: path
          description: Unique id of the targeted service.
          schema:
            type: string
          required: true
        - name: accessionId
          in: path
          description: filter objects in schema using accession ID
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/xml:
              schema:
                type: string
                format: binary
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404NotFound"
    delete:
      tags:
        - Manage
      summary: Delete object from a schema with a specified accession ID
      parameters:
        - name: schema
          in: path
          description: Unique id of the targeted service.
          schema:
            type: string
          required: true
        - name: accessionId
          in: path
          description: filter objects in schema using accession ID
          schema:
            type: string
          required: true
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
  
  /folders:
    get:
      tags:
        - Query
      summary: List of folders available for the user.
      parameters:
        - in: query
          name: page
          schema:
            type: string
          description: Page number
        - in: query
          name: per_page
          schema:
            type: string
          description: Results per page
        - in: query
          name: published
          schema:
            type: string
          example: true
          description: Return folders based on the folder published value. Should be 'true' or 'false'
        - in: query
          name: name
          schema:
            type: string
          example: test folder
          description: Return folders containing filtered string[s] in their name
        - in: query
          name: date_created_start
          schema:
            type: string
          example: "2015-01-01"
          description: |
            Returns folders created between provided dates.
            MUST be used with parameter 'date_created_end'.
        - in: query
          name: date_created_end
          schema:
            type: string
          example: "2015-12-31"
          description: |
            Returns folders created between provided dates.
            MUST be used with parameter 'date_created_start'.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderList"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
    post:
      tags:
        - Submission
      summary: Create a new folder for the user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderCreated"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
  /folders/{folderId}:
    get:
      tags:
        - Query
      summary: Object folder by its folder ID.
      parameters:
        - name: folderId
          in: path
          description: ID of the object folder.
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Folder"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
    patch:
      tags:
        - Manage
      summary: Update information of an object folder.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/JSONPatch"
      parameters:
        - name: folderId
          in: path
          description: ID of the object folder.
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderCreated"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
    delete:
      tags:
        - Manage
      summary: Delete an object folder with a specified folder ID.
      parameters:
        - name: folderId
          in: path
          description: ID of the object folder.
          schema:
            type: string
          required: true
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
  /publish/{folderId}:
    patch:
      tags:
        - Manage
      summary: Update object folder into published state.
      parameters:
        - name: folderId
          in: path
          description: ID of the object folder.
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderCreated"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
  /users/{userId}:
    get:
      tags:
        - Query
      summary: User object by its user ID.
      parameters:
        - name: userId
          in: path
          description: ID of the user object.
          schema:
            type: string
          required: true
        - in: query
          name: page
          schema:
            type: string
          description: Page number
        - in: query
          name: per_page
          schema:
            type: string
          description: Results per page
        - in: query
          name: items
          schema:
            type: string
          description: Item type name
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
    patch:
      tags:
        - Manage
      summary: Update user's folder related information.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/JSONPatch"
      parameters:
        - name: userId
          in: path
          description: ID of the user object.
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserUpdated"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"
    delete:
      tags:
        - Manage
      summary: Delete an user object with a specified user ID.
      parameters:
        - name: userId
          in: path
          description: ID of the user object.
          schema:
            type: string
          required: true
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400BadRequest"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Unauthorized"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Forbidden"

components:
  schemas:
    ErrorModel:
      type: object
      description: Response when some error(s) occurred in one of the endpoints
      required:
        - title
        - detail
      properties:
        type:
          type: string
          description: reference to a human readable documentation of the problem type
        title:
          type: string
          description: Short message, human readable
        detail:
          type: string
          description: details about what error occurred while processing the request
        instance:
          type: string
          description: reference to the specific occurrence of the problem
    400BadRequest:
      allOf:
        - $ref: "#/components/schemas/ErrorModel"
      properties:
        title:
          example: Bad Request
        detail:
          example: the current request could not be processed as the submitted file was not valid
    404NotFound:
      allOf:
        - $ref: "#/components/schemas/ErrorModel"
      properties:
        title:
          example: Not Found
        detail:
          example: the current endpoint does not retrieve any results
    401Unauthorized:
      allOf:
        - $ref: "#/components/schemas/ErrorModel"
      properties:
        title:
          example: Unauthorized
        detail:
          example: the request cannot be authorized
    403Forbidden:
      allOf:
        - $ref: "#/components/schemas/ErrorModel"
      properties:
        title:
          example: Forbidden
        detail:
          example: the request does not contain the right permissions
    SchemasList:
      type: array
      items:
        type: object
        required:
          - title
          - detail
        properties:
          title:
            type: string
            description: Short message, human readable
            example: Sample
          detail:
            type: string
            description: Description of the schema
            example: Sample defines an isolate of sequenceable material upon which sequencing experiments can be based.
          url:
            type: string
            description: URL pointing to the schema source
            example: https://github.com/enasequence/schema/blob/master/src/main/resources/uk/ac/ebi/ena/sra/schema/SRA.sample.xsd
    Object:
      type: object
      required:
        - accessionId
        - publishDate
        - dateCreated
        - dateUpdated
      additionalProperties: true
      properties:
        accessioniId:
          type: string
          description: accession id generated to identify an object
        publishedDate:
          type: string
          description: datetime in ISO8601 format
        dateCreated:
          type: string
          description: datetime in ISO8601 format
        dateUpdated:
          type: string
          description: datetime in ISO8601 format
        accessType:
          type: string
          enum: ["PUBLIC", "REGISTERED", "CONTROLLED"]
          description: in order to determine if a dataset requires a user to be registered or it can be public or it requires special permission or controlled access
    ObjectList:
      type: object
      required:
        - objects
        - page
      properties:
        page:
          $ref: "#/components/schemas/Pagination"
        objects:
          type: array
          items:
            $ref: "#/components/schemas/Object"
    Pagination:
      type: object
      required:
        - page
        - size
        - totalPages
        - totalObjects
      properties:
        page:
          description: current page number
          type: integer
        size:
          type: integer
        totalPages:
          type: integer
        totalObjects:
          type: integer
    ObjectCreated:
      type: object
      required:
        - accessionId
      additionalProperties: false
      properties:
        accessionId:
          type: string
          description: accession id generated to identify an object
    ObjectsCreated:
      type: array
      items:
        type: object
        required:
          - schema
          - accessionId
        additionalProperties: false
        properties:
          accessionId:
            type: string
            description: Accession id generated to identify an object
          schema:
            type: string
            description: type of schema this Accession ID relates to and was added in submit
    ObjectValidated:
      type: object
      required:
        - isValid
      properties:
        isValid:
          type: boolean
          description: true of false if valid. if false a detail key would be good to detail the error but not required
        detail:
          type: object
          description: details of the error if there was one.
          properties:
            reason:
              type: string
              description: reason that caused the validation error
            instance:
              type: string
              description: specific element(s) where error occurred
    FolderCreated:
      type: object
      required:
        - folderId
      properties:
        folderId:
          type: string
          description: Custom generated ID for the object folder.
    Folder:
      type: object
      required:
        - folderId
        - name
        - description
        - published
        - metadataObjects
        - drafts
        - doiInfo
        - extraInfo
      additionalProperties: false
      properties:
        folderId:
          type: string
          description: Folder id
        name:
          type: string
          description: Folder name
        description:
          type: string
          description: Folder description
        published:
          type: boolean
          description: If folder is published or not
        doiInfo:
          type: object
          required:
            - creators
            - titles
            - subjects
          properties:
            creators:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Full name
                    example: "Family name, First name"
                  nameType:
                    type: string
                    description: Type of name
                    example: "Personal"
                  givenName:
                    type: string
                    description: Official first name
                    example: "First name"
                  familyName:
                    type: string
                    description: Official Family name
                    example: "Family name"
                  nameIdentifiers:
                    type: array
                    items:
                      type: object
                  affiliation:
                    type: array
                    items:
                      type: object
            subjects:
              type: array
              items:
                type: object
                properties:
                  subject:
                    type: string
                    description: FOS defined subject name
                    example: "FOS: field"
                  subjectScheme:
                    type: string
                    description: Subject scheme name
                    example: "Fields of Science and Technology (FOS)"
        extraInfo:
          type: object
          required:
            - identifier
            - url
            - resourceType
            - publisher
          properties:
            identifier:
              type: object
              description: DOI id generated according to DOI recommendations
              required:
                - identifierType
              properties:
                identifierType:
                  type: string
                  example: "DOI"
                doi:
                  type: string
                  description: Character string of DOI handle
                  example: "prefix/suffix"
                id:
                  type: string
                  description: Display url for DOI id
                  example: "https://doi.org/prefix/suffix"
            url:
              type: string
              description: URL of the digital location of the object
            publisher:
              type: string
              description: Full name of publisher from Research Organization Registry
            resourceType:
              type: object
              required:
                - resourceTypeGeneral
              properties:
                resourceTypeGeneral:
                  type: string
                  description: Mandatory general type name
                  example: "Dataset"
                type:
                  type: string
                  description: Name of resource type
        metadataObjects:
          type: array
          items:
            type: object
            required:
              - accessionId
              - schema
            additionalProperties: false
            properties:
              accessionId:
                type: string
                description: Accession id generated to identify an object
              schema:
                type: string
                description: type of schema this Accession ID relates to and was added in submit
              tags:
                type: object
                description: Different tags to describe the object.
                additionalProperties: true
                properties:
                  submissionType:
                    type: string
                    description: Type of submission
                    enum: ["XML", "Form"]
        drafts:
          type: array
          items:
            type: object
            required:
              - accessionId
              - schema
            additionalProperties: false
            properties:
              accessionId:
                type: string
                description: Accession id generated to identify an object
              schema:
                type: string
                description: type of schema this Accession ID relates to and was added in submit
              tags:
                type: object
                description: Different tags to describe the object.
                additionalProperties: true
                properties:
                  submissionType:
                    type: string
                    description: Type of submission
                    enum: ["XML", "Form"]
    FolderList:
      type: object
      required:
        - page
        - folders
      additionalProperties: false
      properties:
        page:
          $ref: "#/components/schemas/Pagination"
        folders:
          type: array
          items:
            $ref: "#/components/schemas/Folder"
    User:
      type: object
      required:
        - userId
        - name
        - drafts
        - folders
      additionalProperties: false
      properties:
        userId:
          type: string
          description: User Id
        name:
          type: string
          description: User's Name
        drafts:
          type: array
          items:
            type: object
            required:
              - accessionId
              - schema
            additionalProperties: false
            properties:
              accessionId:
                type: string
                description: Accession id generated to identify an object
              schema:
                type: string
                description: type of schema this Accession ID relates to and was added in submit
              tags:
                type: object
                description: Different tags to describe the object.
                additionalProperties: true
                properties:
                  submissionType:
                    type: string
                    description: Type of submission
                    enum: ["XML", "Form"]
        folders:
          type: array
          items:
            type: string
            description: Folder Id
    UserUpdated:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          description: Custom generated ID for the user object.
    JSONPatch:
      type: array
      items:
        type: object
        required:
          - op
          - path
          - value
        additionalProperties: false
        properties:
          op:
            type: string
            description: JSON Patch operation
            enum: ["add", "replace"]
            example: add
          path:
            type: string
            description: Key that will be patched
            example: /metadataObjects/-
          value:
            additionalProperties:
              oneOf:
                - type: string
                - type: array
            example: [object]
